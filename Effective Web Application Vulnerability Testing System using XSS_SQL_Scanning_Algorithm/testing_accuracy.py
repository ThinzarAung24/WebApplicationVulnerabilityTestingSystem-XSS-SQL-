import tkinter
from tkinter import *
import tkinter as tk
from tkinter import messagebox
import mysql.connector
from tkinter import ttk
from tkinter.ttk import Treeview, Scrollbar
from colorama import Fore

my_db = mysql.connector.connect(host="localhost", user="aung", password="1234", database="test_accuracy",
                                auth_plugin="mysql_native_password")
cursor = my_db.cursor()

true_list = []
false_list = []
link_no = []
links = []
true_positive = []
true_negative = []
f_negative = []
false_negative = []
f_positive = []
false_positive = []


def number_of_links():
    query = "select * from test_links"
    cursor.execute(query)
    for i in cursor:
        link_no.append(i)
    return link_no


links = number_of_links()


#  true positive
def true_result():
    query1 = "select Acunetix_Results = 'SQL injection' OR Acunetix_Results = 'Cross site scripting' from test_links " \
             "where Our_Results = 'Possible SQL injection' OR Our_Results = 'Possible Cross site scripting' "
    cursor.execute(query1)
    for i in cursor:
        true_list.append(i)
    return true_list


true_positive = true_result()


# false_positive
def positive_result():
    query4 = "select Our_Results = 'Possible SQL injection' OR Our_Results = 'Possible Cross site scripting' from " \
             "test_links where Acunetix_Results = 'No SQL and XSS' AND  Our_Results = 'Possible SQL injection' OR " \
             "'Possible Cross site scripting'"
    # query4 = "select Our_Results = 'Possible SQL injection' OR Our_Results = 'Possible Cross site scripting' from " \
    #          "test_links where Acunetix_Results = 'No SQL and XSS' AND  Our_Results = 'Possible Cross site scripting'"
    cursor.execute(query4)
    for i in cursor:
        f_positive.append(i)

    return f_positive


false_positive = positive_result()


# true negative
def false_result():
    query2 = "select Acunetix_Results = 'No SQL and XSS' from test_links where Our_Results = 'Not Found any " \
             "Vulnerability' "
    cursor.execute(query2)
    for i in cursor:
        false_list.append(i)
    return false_list


true_negative = false_result()


# false_negative
def negative_result():
    query3 = "select Acunetix_Results = 'SQL injection' OR Acunetix_Results = 'Cross site scripting' from test_links " \
             "where Our_Results = 'Not Found' "
    cursor.execute(query3)
    for i in cursor:
        f_negative.append(i)
    return f_negative


false_negative = negative_result()

# Test Accuracy
True_Positive_Rate = (len(true_positive) / (len(false_negative) + len(true_positive)))*100

False_Positive_Rate = (len(false_positive) / (len(true_negative) + len(false_positive)))*100

True_Negative_Rate = (len(true_negative) / (len(true_negative) + len(false_positive)))*100

False_Negative_Rate = (len(false_negative) / (len(false_negative) + len(true_positive)))*100

accuracy = ((len(true_positive) + len(true_negative)) / (
        len(true_positive) + len(false_positive) + len(true_negative) + len(false_negative)))*100


def exit():
    sys.exit()


def testing_accuracy():
    newWindow = tkinter.Toplevel()
    newWindow.title("Testing Accuracy !!!")
    # newWindow.resizable(width=0, height=0)
    newWindow.geometry("1000x800")
    # newWindow.config(bg="white")
    topFrame = tkinter.Frame(newWindow)
    topFrame.pack(side=TOP)
    show_result = ttk.Treeview(topFrame, columns=(1, 2, 3, 4), show="headings", height="20", selectmode="extended")
    show_result.column(2, width=500)
    show_result.pack(pady=40)
    show_result.heading(1, text="No.")
    show_result.column(1, width=35)
    show_result.heading(2, text="All Links")
    show_result.heading(3, text="Our Results")
    show_result.heading(4, text="Acunetix Results")

    vsb = Scrollbar(topFrame, orient="vertical", command=show_result.yview)
    vsb.place(relx=0.978, rely=0.175, relheight=0.713, relwidth=0.020)

    # hsb = Scrollbar(topFrame, orient="horizontal", command=show_result.xview)
    # hsb.place(relx=0.014, rely=0.875, relheight=0.020, relwidth=0.965)

    show_result.configure(yscrollcommand=vsb.set)

    query = "select Link_No, all_links, our_results, acunetix_results from test_links"
    cursor.execute(query)
    rows = cursor.fetchall()

    for i in rows:
        show_result.insert('', 'end', value=i)

    btm_frame = Frame(newWindow)
    btm_frame.pack()
    e1 = Label(btm_frame, text="=", width=5)
    e1.grid(row=0, column=1)
    e2 = Label(btm_frame, text="=", width=5)
    e2.grid(row=1, column=1)
    e3 = Label(btm_frame, text="=", width=5)
    e3.grid(row=2, column=1)
    e4 = Label(btm_frame, text="=", width=5)
    e4.grid(row=3, column=1)
    e5 = Label(btm_frame, text="=", width=5)
    e5.grid(row=4, column=1)
    l1 = Label(btm_frame, text="Number of Links")
    l1.grid(row=0, column=0)
    l2 = Label(btm_frame, text="True Positive")
    l2.grid(row=1, column=0)
    l3 = Label(btm_frame, text="False Positive")
    l3.grid(row=2, column=0)
    l4 = Label(btm_frame, text="True Negative")
    l4.grid(row=3, column=0)
    l5 = Label(btm_frame, text="False Negative")
    l5.grid(row=4, column=0)
    l6 = Label(btm_frame, text=str(len(links)))
    l6.grid(row=0, column=2)
    l7 = Label(btm_frame, text=str(len(true_positive)), width=5)
    l7.grid(row=1, column=2)
    l8 = Label(btm_frame, text=str(len(false_positive)), width=5)
    l8.grid(row=2, column=2)
    l9 = Label(btm_frame, text=str(len(true_negative)), width=5)
    l9.grid(row=3, column=2)
    l10 = Label(btm_frame, text=str(len(false_negative)), width=5)
    l10.grid(row=4, column=2)
    l11 = Label(btm_frame, text="Measure", width=20, relief="ridge", bd=3, fg="black")
    l11.grid(row=0, column=3, padx=1, pady=1)
    l12 = Label(btm_frame, text="True Positive Rate", width=20, relief="solid", bd=1)
    l12.grid(row=1, column=3)
    l13 = Label(btm_frame, text="False Positive Rate", width=20, relief="solid", bd=1)
    l13.grid(row=2, column=3)
    l14 = Label(btm_frame, text="True Negative Rate", width=20, relief="solid", bd=1)
    l14.grid(row=3, column=3)
    l15 = Label(btm_frame, text="False Negative Rate", width=20, relief="solid", bd=1)
    l15.grid(row=4, column=3)
    # laccuracy = Label(btm_frame, text="Accuracy", width=20, relief = "solid", bd=1)
    # laccuracy.grid(row=5, column=3)
    l16 = Label(btm_frame, text="Formula", width=40, relief="ridge", bd=3, fg="black")
    l16.grid(row=0, column=4)
    l17 = Label(btm_frame, text="TPR = TP/(TP + FN)", width=40, relief="solid", bd=1)
    l17.grid(row=1, column=4)
    l18 = Label(btm_frame, text="FPR = FP/(FP + TP)", width=40, relief="solid", bd=1)
    l18.grid(row=2, column=4)
    l19 = Label(btm_frame, text="TNR = TN/(TN + FP)", width=40, relief="solid", bd=1)
    l19.grid(row=3, column=4)
    l20 = Label(btm_frame, text="FNR = FN/(FN + TP)", width=40, relief="solid", bd=1)
    l20.grid(row=4, column=4)
    laccuracy2 = Label(btm_frame, text="Accuracy = ((TP + TN)/(TP + FP + TN + FN))*100 ", width=40, relief="solid", bd=1,
                       fg="red")
    laccuracy2.grid(row=5, column=3, columnspan=5)
    l21 = Label(btm_frame, text="Value (%)", width=20, relief="ridge", bd=3, fg="black")
    l21.grid(row=0, column=5)
    l22 = Label(btm_frame, text=str(True_Positive_Rate), width=20, relief="solid", bd=1)
    l22.grid(row=1, column=5)
    l23 = Label(btm_frame, text=str(False_Positive_Rate), width=20, relief="solid", bd=1)
    l23.grid(row=2, column=5)
    l24 = Label(btm_frame, text=str(True_Negative_Rate), width=20, relief="solid", bd=1)
    l24.grid(row=3, column=5)
    l25 = Label(btm_frame, text=str(False_Negative_Rate), width=20, relief="solid", bd=1)
    l25.grid(row=4, column=5)
    laccuracy3 = Label(btm_frame, text=str(accuracy), width=20, relief="solid", bd=1, fg="red")
    laccuracy3.grid(row=5, column=5)
    exit_button = tkinter.Button(newWindow, text="Exit", command=exit, width=10, fg="red")
    exit_button.pack(side=RIGHT, padx=8)
